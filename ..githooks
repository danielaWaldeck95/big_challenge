#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
# exec git diff-index --check --cached $against --

#  First we get Staged files (Excluding those that were deleted
#  since we cannot check those)
STAGED_FILES=$(git diff-index --name-only --cached --diff-filter=ACMR $against -- )

#  If there are no staged files, we finish here
if [ "$STAGED_FILES" = "" ]; then
  exit 0
fi
#  else we continue with our checks
#  We set a control variable to check at the end
#  This will turn false only if errors are found during checks
PASS=true

#  We start iterating across the staged files
for FILE in $STAGED_FILES
do
  #  We run larastan and php_CodeSniffer's auto fix for each file.
  #  If there are any files that don't pass our checks then
  #  we print to the console and set our PASS control variable to
  #  false.
  ./vendor/bin/phpstan analyse "$FILE" --memory-limit 2G

  # Alternatively, you can run Larastan within docker container (If using Laravel sails) with the following
  # Comment the line above and uncomment line below
  # ./vendor/bin/sail shell -c ./vendor/bin/phpstan analyse "$FILE" --memory-limit=2G

  if [[ "$?" == 0 ]]; then
      echo "\t\033[32mPassed: $FILE\033[0m"
  else
      echo "\t\033[41mFailed: $FILE\033[0m"
      PASS=false
  fi

  ./vendor/bin/phpcbf "$FILE"
  # Also you can run phpcbf within docker container (if using Laravel sails) with the following
  # ./vendor/bin/sail php ./vendor/bin/phpcbf --standard=phpcs.xml "$FILE"

  if [[ "$?" == 0 ]]; then
    echo "\t\033[32mPassed: $FILE\033[0m"
  else
    echo "\t\033[41mFailed: $FILE\033[0m"
    PASS=false
  fi
done

#  Finally, we check the value of our PASS variable and stop the
#  commit with a 1 exit code if needed (All non-zero exit codes
#  are errors and will stop the commit process).
if ! $PASS; then
  echo "\033[41mCOMMIT FAILED:\033[0m Your commit contains files that should pass Code Standards but do not. Please fix the errors and try again.\n"
  exit 1
else
  echo "\033[42mCOMMIT SUCCEEDED\033[0m\n"
fi

exit $?
